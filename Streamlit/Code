import streamlit as st
import librosa
import numpy as np
import torch
import matplotlib.pyplot as plt
from pathlib import Path

# -------------------------
# USER CONFIGURATION
# -------------------------
MODEL_PATH = Path(__file__).parent / "checkpoints" / "best_model.pth"
CLASS_MAP = {0: "class_a", 1: "class_b", 2: "class_c", 3: "class_d", 4: "class_e"}  # replace with your labels
SAMPLE_RATE = 32000
N_MELS = 128

# -------------------------
# LOAD MODEL
# -------------------------
@st.cache(allow_output_mutation=True)
def load_model(path):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    checkpoint = torch.load(path, map_location=device)
    model = checkpoint['model']  # adjust based on your checkpoint content
    model.to(device).eval()
    return model, device

# -------------------------
# FEATURE EXTRACTION
# -------------------------
def extract_log_melspec(y, sr, n_mels=N_MELS):
    mels = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=n_mels)
    log_mels = librosa.power_to_db(mels)
    return log_mels

# -------------------------
# PREDICTION
# -------------------------
def predict(audio_tensor, model, device, top_k=5):
    with torch.no_grad():
        audio_tensor = audio_tensor.to(device)
        logits = model(audio_tensor)
        probs = torch.softmax(logits, dim=-1).cpu().numpy().flatten()
    top_idx = np.argsort(probs)[::-1][:top_k]
    return [(CLASS_MAP[i], float(probs[i])) for i in top_idx]

# -------------------------
# STREAMLIT APP LAYOUT
# -------------------------
st.title("ðŸŽ§ Audio Classification Demo")
st.markdown("Upload an audio file and get a real-time classification with mel-spectrogram visualization.")

# Sidebar controls
task = st.sidebar.selectbox("Task", ["Upload & Classify"])  

if task == "Upload & Classify":
    uploaded_file = st.file_uploader("Choose an audio file", type=["wav", "mp3", "flac"])
    if uploaded_file:
        # Playback
        st.audio(uploaded_file, format='audio/wav')

        # Load audio
        y, sr = librosa.load(uploaded_file, sr=SAMPLE_RATE)

        # Visualize spectrogram
        log_mels = extract_log_melspec(y, sr)
        fig, ax = plt.subplots(figsize=(8, 3))
        img = librosa.display.specshow(log_mels, sr=sr, x_axis='time', y_axis='mel', ax=ax)
        ax.set_title("Log-Mel Spectrogram")
        fig.colorbar(img, ax=ax, format="%+2.0f dB")
        st.pyplot(fig)

        # Prepare tensor
        tensor = torch.tensor(log_mels)[None, None, :, :].float()

        # Load model
        model, device = load_model(MODEL_PATH)

        # Predict
        results = predict(tensor, model, device)

        # Display results
        st.subheader("Top 5 Predictions")
        labels, scores = zip(*results)
        df = {'Label': labels, 'Probability': scores}
        st.table(df)
        st.bar_chart(data=scores, x=labels)

